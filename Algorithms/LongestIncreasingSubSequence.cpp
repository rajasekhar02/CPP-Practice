#include<bits/stdc++.h>
using namespace std;
 vector<int> nums;
 vector<vector<int>> bestLen;
 int solveLISBug(int position, int prev_big_num_idx){
    
    if(position >= nums.size()){
        // this last index value is zero because the counting is starting from the last position
        return 0;
    }

    if(nums[position] > nums[prev_big_num_idx]){
        return  1 + solveLISBug(position+1, prev_big_num_idx);
    }
    
    int len_if_this_position_neglected = solveLISBug(position+1, prev_big_num_idx);
    
    int len_if_seq_start_from_this_position = solveLISBug(position+1, position);
        
    return  max(len_if_this_position_neglected, len_if_seq_start_from_this_position);
    
}

int solveLISBug1(int position, int prev_big_num_idx, int length){
        
    if(position >= nums.size()){
        // this last index value is zero because the counting is starting from the last position
        return length;
    }

    if(nums[position] > nums[prev_big_num_idx]){
        return  solveLISBug1(position+1, prev_big_num_idx, length+1);
    }
    
    int len_if_this_position_neglected = solveLISBug1(position+1, prev_big_num_idx, length);
    
    int len_if_seq_start_from_this_position = solveLISBug1(position+1, position, 0);
        cout<<len_if_this_position_neglected<<" "<<len_if_seq_start_from_this_position<<endl;

    return  max(len_if_this_position_neglected, len_if_seq_start_from_this_position);
}

int solveLISRec(int position, int prev_big_num_idx, int length){
        
    if(position >= nums.size()){
        // this last index value is zero because the counting is starting from the last position
        return length;
    }
    if(nums[prev_big_num_idx] >= nums[position]){
        return  solveLISRec(position+1, prev_big_num_idx, length);
    }
    
    int len_if_this_position_neglected = solveLISRec(position+1, prev_big_num_idx, length);
    
    int len_if_seq_includes_this_position = solveLISRec(position+1, position, length+1);
        
    return  max(len_if_this_position_neglected, len_if_seq_includes_this_position);
}

int solveLISDP(int position, int prev_big_num_idx){
    if(position >= nums.size()){
        return 0;
    }
    if(bestLen[position][prev_big_num_idx]!=-1){
        return bestLen[position][prev_big_num_idx];
    }
    if(nums[prev_big_num_idx] >= nums[position]){ 
        return solveLISDP(position+1, prev_big_num_idx);
    }
    
    int len_if_this_position_neglected = solveLISDP(position+1, prev_big_num_idx);
    
    int len_if_seq_includes_this_position = 1+solveLISDP(position+1, position);
    
    bestLen[position][prev_big_num_idx] = max(len_if_this_position_neglected,len_if_seq_includes_this_position);
    
    return bestLen[position][prev_big_num_idx];
}

int solveLISDP2(int position, int prev_big_num_idx,int length){
    if(position >= nums.size()){
        return length;
    }
    if(bestLen[position][prev_big_num_idx]!=-1){
        return length+(bestLen[position][prev_big_num_idx]-1);
    }
    if(nums[prev_big_num_idx] >= nums[position]){ 
        return solveLISDP2(position+1, prev_big_num_idx, length);
    }
    // In this region prev_big_num_idx is less than the number at the current position
    int len_if_this_position_neglected = solveLISDP2(position+1, prev_big_num_idx,length);
    
    int len_if_seq_includes_this_position = solveLISDP2(position+1, position,length+1);
    bestLen[position][prev_big_num_idx] = max(len_if_this_position_neglected,len_if_seq_includes_this_position);
    
    return bestLen[position][prev_big_num_idx];
}

int main(){
// 3
// 4
// 1
// 4
// 3
    vector<vector<int>> testcases = {
        vector<int>{4,10,4,3,8,9},
        vector<int>{10,9,2,5,3,7,101,18},
        vector<int>{7,7,7,7,7,7,7},
        vector<int>{0,1,0,3,2,3},
        vector<int>{10,9,2,5,3,4},
        vector<int>{221,740,540,-592,-945,910,-979,705,990,54,-600,81,79,-246,956,-63,974,-376,-204,123,-525,-2,-878,-251,-603,434,542,208,-414,-759,-932,-987,273,788,276,-642,-28,989,735,914,-169,-104,786,593,73,-649,219,-66,322,-141,759,200,640,899,-114,555,836,-854,159,-427,-107,447,193,66,406,42,7,465,-412,180,527,857,150,669,495,986,583,281,604,581,-468,-62,823,346,252,-322,-668,-217,-664,944,406,-865,-727,-476,684,-320,628,560,24,550,-607,93,352,897,-995,238,976,572,-940,21,34,1,508,-768,-918,-664,-209,-339,376,629,-358,224,319,-823,-186,525,-231,-306,-237,-433,227,878,903,845,606,-985,-662,328,420,646,240,-448,-213,-203,280,0,423,39,-660,944,329,529,572,450,441,-962,169,687,12,105,-314,481,-744,-110,751,-767,-420,-835,283,270,284,118,15,-414,949,133,-146,-619,53,977,532,865,727,-493,-979,-418,574,-437,678,-568,-710,107,-474,968,-717,411,-543,972,413,528,272,270,-415,-69,-203,-546,729,-39,406,-972,740,-866,301,-222,-245,65,373,-280,-4,-215,375,56,-493,-622,12,-840,-647,425,-740,-859,976,-188,-591,677,-687,-883,369,-75,646,-485,409,-753,-141,-930,-441,329,689,-988,-465,348,488,323,-504,-775,-702,-125,-487,-582,-159,-378,991,475,-490,-449,553,694,-997,-900,-578,896,98,431,270,456,527,4,50,980,498,-866,-471,414,203,1000,571,-22,563,463,-365,390,-875,459,-19,253,530,-617,-961,209,-185,520,56,-5,53,337,280,-929,465,661,706,904,-756,900,886,689,60,-412,534,-873,555,409,604,-782,324,289,-295,-583,178,125,-934,-54,246,890,-277,750,155,-830,709,886,-230,-863,-86,-305,-44,-905,200,-804,568,161,-849,672,629,86,337,530,135,-634,-471,410,693,-906,-693,879,867,-628,398,-514,947,-880,-169,647,662,-361,-762,227,590,-581,586,485,183,-847,808,756,306,-703,812,-453,-900,-878,-971,-901,-593,532,129,-971,510,-579,419,632,666,-334,-423,-188,-521,396,935,531,897,-580,-1000,618,757,-794,-865,-422,-873,-141,-782,-698,-136,946,511,-884,-865,1,-352,266,511,863,166,-537,775,950,511,760,-463,399,447,-805,-831,55,-907,598,499,-758,324,502,-426,-759,-468,298,-631,-828,-631,209,-861,-585,-906,675,5,-609,-412,-847,-10,918,78,-613,655,-210,-482,-180,-83,344,-351,661,-657,35,675,-118,594,-663,-107,-633,-89,-306,-72,-857,353,239,798,122,816,-106,-339,-261,-734,872,-641,-712,-723,-444,-293,71,-45,-444,419,-437,160,-36,384,695,-499,-569,-992,-186,672,-801,-329,694,538,-636,229,-601,591,-290,723,-325,82,-920,-670,-720,631,226,-707,928,-407,-500,-496,-95,-113,-514,-553,278,-23,-977,-39,705,-659,-165,928,-564,207,406,-358,-334,-199,995,798,47,-571,-308,13,123,465,418,433,-166,-354,-543,-696,604,-979,445,-327,950,855,160,410,-293,-759,-481,-232,202,310,604,623,624,246,558,637,514,881,71,662,264,-40,-201,442,-334,11,118,106,-973,392,426,-324,-971,465,595,-50,288,703,-285,-668,-690,84,908,163,-421,-668,-172,-278,-708,810,-452,-301,487,287,-412,-576,-572,497,-412,-400,213,-54,-798,-727,397,844,-610,307,899,643,992,-295,628,-332,273,-882,-740,-643,619,111,-389,869,-314,476,-299,564,-276,-80,-571,419,-441,410,569,-458,845,224,131,-163,-302,777,-570,-974,580,372,529,-228,868,-853,-54,154,-101,167,249,261,-170,630,-657,-580,64,369,960,528,28,-657,370,315,1000,954,-902,-75,174,-969,904,967,676,-35,-207,-350,-581,441,707,332,-740,-417,-510,826,337,88,540,924,-91,902,477,-330,253,-522,-969,-899,844,200,-278,-607,-624,46,850,-306,3,19,919,-339,-461,-355,-296,-677,-866,-970,825,-348,-618,152,315,802,-937,-740,954,586,-77,776,-229,463,-568,931,-393,768,-912,687,-523,-126,724,457,518,316,154,99,-580,927,720,-803,838,883,41,858,-343,-37,-946,-79,-66,462,-247,-829,-865,945,25,-742,761,-672,-277,-198,608,-274,505,-957,-569,590,414,112,-480,-985,723,835,-676,72,563,-146,-97,148,656,443,-673,-124,-251,-773,877,611,302,-207,538,-723,-695,-466,-107,-823,611,515,-550,-770,-133,704,171,173,-859,-381,-536,51,-515,-610,-99,-651,-724,-644,-949,963,-892,502,-106,200,896,453,-149,-543,-849,141,-512,-184,822,702,476,33,631,902,512,-140,-53,597,336,-463,-714,466,-678,-346,-822,119,-757,647,-987,-135,-802,624,-300,626,-505,-611,805,846,581,-566,276,-707,-247,-10,65,386,37,-45,-404,165,-939,915,-301,-22,-840,331,-965,443,131,-321,865,-545,-469,-482,-882,668,-416,19,-178,735,347,770,45,45,962,-24,-133,-751,469,-996,-332,926,607,-10,-312,-754,425,277,256,-50,-538,889,821,703,-18,634,-447,-382,754,-898,-427,875,-283,154,78,-946,-774,-22,587,818,187,-529,-625,-902,-239,104,-919,84,-117,488,247,893,-302,-618,159,-255,-913,-446,-513,-387,-503,821,-454,-795,90,-219,794,845,772,-457,-902,370,119,-704,926,965,308,332,-767,293,545,-183,-778,461,682,212,-841,-35,-887,594,-917,980,422,970,-213,362,-587,440,-56,-513,-959,556,-194,-108,77,-837,13,-395,-564,-603,475,150,-285,258,38,790,-468,-87,-90,940,819,4,-518,802,-287,400,336,824,300,93,-561,-414,421,-887,22,-663,-111,-280,448,-183,958,451,406,677,-941,562,-444,757,200,-757,34,-111,-673,191,68,-814,-781,-219,879,-88,-389,-313,137,-674,-521,-210,-784,74,490,-512,-752,330,-910,-2,-84,-545,-546,514,335,-860,540,-738,863,-638,-735,-160,-763,-926,-35,-562,277,-544,26,844,-214,73,92,-695,-829,439,529,449,-299,-756,113,-772,2,804,982,434,555,905,-933,918,970,994,300,353,905,-138,-905,548,416,-415,-111,267,-77,773,591,436,-276,-936,955,-634,312,938,537,-860,-950,-270,-537,460,623,-423,466,-120,323,985,642,-430,672,-698,408,-925,-270,738,949,-885,373,533,-650,-679,845,795,76,-664,-378,754,638,76,-31,-742,266,397,47,-980,429,375,-250,294,696,-642,-371,170,-735,-528,994,985,-323,934,-329,77,-869,-900,-854,-249,225,445,-736,-444,729,-611,894,-985,878,-535,-756,-612,964,755,99,-399,-148,-975,-135,792,-950,-205,378,-617,-104,325,660,463,-776,810,-278,698,136,809,262,357,497,-876,-155,-642,877,-772,-991,-796,-99,275,-980,-421,891,260,93,118,542,-53,94,-947,296,945,819,744,-781,-676,345,76,747,704,39,-645,73,711,-154,-713,451,7,-555,663,462,160,413,135,459,-908,-550,-149,-956,-124,746,-86,676,551,66,45,-896,-896,-866,-137,288,-910,-52,-771,-906,278,675,-794,-97,19,537,35,-801,-684,993,779,121,399,40,575,-18,951,56,-167,-538,-764,-721,-222,810,-379,-169,-844,411,-170,-872,106,-904,761,-178,-39,923,-714,4,-75,904,846,974,673,-205,-966,282,225,-509,326,-4,-321,-370,-620,13,51,-290,166,-178,-230,111,-268,626,-520,-647,819,654,41,893,151,870,-543,-584,455,-944,-650,84,-671,-675,312,524,653,-787,-340,227,599,744,-157,-939,-417,-818,-360,-607,-339,-105,676,-768,296,-638,-486,-327,-48,233,542,-713,623,10,-553,274,-142,230,-140,253,-723,886,-79,-14,11,-542,773,227,-181,701,444,827,-299,-154,753,760,-393,792,886,-840,409,-950,-529,405,-315,567,-787,445,682,-718,650,657,349,-854,-699,-354,-609,-33,489,304,702,-523,785,-999,423,-959,371,646,21,-485,-997,66,-867,-603,-508,193,197,820,571,549,-995,-756,94,-705,471,-79,766,-701,411,-438,-29,829,-718,475,-423,-732,386,-634,1000,-147,-707,867,90,921,812,258,-865,-909,-530,578,-949,-446,-50,295,-648,-160,458,651,-417,-380,495,-263,700,50,-71,-706,-636,-786,987,-127,338,47,-647,-31,-697,944,362,-852,-105,294,121,-607,451,49,533,-586,-722,27,23,928,-252,-492,-1,557,-533,347,809,191,62,621,-302,99,-26,-113,-967,296,-188,172,-959,756,293,354,566,211,153,588,-154,736,985,-259,168,313,603,-618,173,413,-822,364,-961,820,64,-1,399,21,-638,415,-788,868,-916,196,249,626,245,176,328,3,912,-963,193,213,150,270,-777,-79,-955,64,-27,-262,390,614,-711,-203,33,-126,-368,-912,-952,340,806,377,617,12,808,994,610,19,302,377,-424,137,751,-155,-464,-638,667,746,-928,39,215,660,-741,-611,101,-938,-394,-499,-453,142,439,-311,-307,362,-64,-959,-233,-820,597,-123,-841,198,691,-579,178,67,-374,462,588,-595,742,450,-653,402,-937,420,454,-2,-518,86,201,-728,102,-1000,-832,925,963,465,425,213,465,790,247,-752,259,-92,-573,9,-824,-674,167,-89,-677,-886,570,987,768,794,-900,932,817,-564,42,112,-372,307,539,-178,852,-861,-970,904,-481,-354,-59,-593,974,762,-659,-250,-939,993,-299,-450,-498,935,-294,-39,-125,482,263,475,565,338,749,-774,-994,425,-863,118,302,92,354,-773,-535,145,-368,787,817,-338,354,316,974,-927,-91,-417,731,463,-549,916,306,51,-838,359,-37,-829,-976,186,-16,13,646,-218,428,45,-147,-431,-673,788,648,-685,420,74,-644,-490,-447,361,278,269,-245,-172,-457,-742,-389,49,-323,763,-312,-450,-36,532,730,-352,-703,777,482,678,-363,725,-657,-708,582,-714,726,-486,-216,-984,725,-459,-700,-347,550,-367,-1,-771,-27,-837,-180,-881,-567,24,-95,-163,521,-920,-61,-49,-976,89,658,50,-843,-978,-201,994,357,741,656,-342,-538,602,719,833,-134,-573,229,947,-242,571,971,-375,600,446,690,222,918,-769,319,211,-707,-249,-338,-45,242,743,-168,227,812,385,718,692,635,-562,-15,866,605,678,216,1,-879,-812,-570,-531,993,258,605,979,51,-66,112,-759,418,174,-655,212,883,-990,637,-56,-146,1000,255,-591,566,-358,583,-555,953,-96,295,-88,-260,-64,-375,109,-809,-824,864,-511,89,964,113,91,-322,158,-104,742,-627,198,-716,-204,532,901,933,-762,-41,840,476,390,907,-458,803,822,-195,461,-960,-630,-66,309,519,435,866,474,-335,63,-135,513,-917,-283,241,-977,605,-864,911,-226,906,704,552,250,-890,167,-514,-927,-592,540,-638,178,325,-835,909,-596,-974,283,-144,-947,508,762,990,471,166,-533,247,-540,-564,201,-81,345,-79,-81,634,86,325,675,-97,-853,-379,51,77,692,-868,-135,408,-358,959,-553,-66,54,752,-540,-329,60,262,318,-574,-590,-242,207,430,-715,-60,-515,733,-657,242,-465,-552,-478,475,-234,73,-843,-917,880,-724,918,326,413,713,-139,-953,-525,-858,966,960,446,70,-316,-111,-771,704,-627,-404,551,-63,-438,-373,774,-399,270,418,-192,-24,-622,-393,-37,-669,-90,240,412,-630,769,670,-136,512,166,446,-292,-738,130,325,-747,995,424,-795,-974,-825,591,-965,296,-938,257,-382,387,-957,-716,-356,413,-601,-152,-170,-950,1000,1000,-830,79,404,269,-608,-268,-179,718,-929,-390,-63,-779,-489,996,-177,985,97,898,-333,797,535,880,-368,-650,267,621,-880,-657,215,424,-771,-765,-712,562,-75,154,260,530,-867,-962,209,-713,6,220,-620,-790,943,-682,262,211,-120,-881,586,-457,-629,522,330,966,971,-445,218,-311,787,-274,-885,-766,-456,-680,-733,633,-698,-878,657,-946,187,635,-133,-880,-242,-415,-139,435,586,646,-284,226,121,485,526,209,-113,244,54,893,-38,507,-265,928,771,-297,-413,-353,229,239,929,-362,985,556,-949,976,933,421,7,726,733,845,462,642,635,904,618,-34,33,-461,-214,581,939,627,-625,430,-10,-369,132,674,877,-833,-297,328,483,-599,407,-360,-168,-770,860,96,909,-646,338,-954,973,-769,-488,-730,81,345,-229,-812,800,-189,854,-387,306,-266,-538,-59,-839,-131,905,-791,-756,974,-332,931,865,507,600,-121,-468,-1,-484,364,-522,-313,865,-997,404,-109,914,490,-541,-850,-280,-527,-77,-114,336,574,-889,-598,-600,-679,-828,106,-275,985,-938,-996,-105,-114,672,-837,-253,661,-734,-941,131,-707,286,-710,-97,987,-926,-304,317,-535,-169,-544,293,-722,-392,-940,578,-211,803,827,-759,518,-213,-435,304,629,-732,14,231,573,894,-297,-923,714,-553,720,-730,-980,-358,-792,437,988,-523,348,-524,864,906,138,516,-220,801,963,-936,536,-556,-218,197,316,889,441,-704,-74,82,393,-873,-262,-224,135,708,-643,13,-187,878,870,285,-199,-659,-651,827,448,12,488,-154,651,92,459,353,-180,-909,-860}
    };
   for(int i=0;i<testcases.size();i++){
        nums = vector<int>(testcases[i].size()+1, -1e9);
        for(int j=0;j<testcases[i].size();j++){
            nums[j+1] = testcases[i][j];
        } 
        bestLen = vector< vector<int> >(nums.size(),vector<int>(nums.size(),-1));
        int value = solveLISDP2(1,0,0);
        // cout<<"answer: "<<value<<endl;
    }
    return 0;
}